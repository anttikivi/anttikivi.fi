---
import faviconColorSrc from "@/assets/favicon-color.png";
import icoFaviconSrc from "@/assets/favicon.ico";
import faviconSrc from "@/assets/favicon.svg";
import { useTranslations } from "@/i18n";
import locales, { defaultLocale, languageCodes, type Locale } from "@/locales";
import { getRoute, getRouteKey } from "@/routes";
import "@/styles/global.css";
import "@fontsource/libre-baskerville/400-italic.css";
import libreBaskervilleWoff from "@fontsource/libre-baskerville/files/libre-baskerville-latin-400-italic.woff2";
import "@fontsource/manrope";
import manropeWoff from "@fontsource/manrope/files/manrope-latin-400-normal.woff2";
import "@fontsource/red-hat-mono";
import redHatMonoWoff from "@fontsource/red-hat-mono/files/red-hat-mono-latin-400-normal.woff2";
import type { ImageMetadata } from "astro";
import { getImage } from "astro:assets";

interface Props {
  description?: string;
  error?: boolean | undefined;
  preloadMono?: boolean | undefined;
  preloadSerif?: boolean | undefined;
  title?: string | undefined;
}

const locale = Astro.props.error ? "fi" : (Astro.currentLocale as Locale);
const t = useTranslations("site", locale);
const {
  description = t("description"),
  error,
  preloadMono,
  preloadSerif,
  title,
} = Astro.props;
const isIndex =
  (locale === defaultLocale && Astro.url.pathname === "/") ||
  (locale !== defaultLocale && Astro.url.pathname === `/${locale}/`);

const pageTitle = isIndex
  ? `${t("title")} - ${t("subtitle")}`
  : `${title} - ${t("title")}`;
const canonicalURL = `${Astro.site?.origin}${Astro.url.pathname}`;

const svgFavicon = await getImage({ format: "svg", src: faviconSrc });
const icoFavicon = await getImage({
  src: icoFaviconSrc,
  width: 16,
  height: 16,
});
const favicon32 = await getImage({
  format: "png",
  src: faviconColorSrc,
  width: 32,
  height: 32,
});
const favicon16 = await getImage({
  format: "png",
  src: faviconColorSrc,
  width: 16,
  height: 16,
});
const favicon180 = await getImage({
  format: "png",
  src: faviconColorSrc,
  width: 180,
  height: 180,
});

const opengraphImages = import.meta.glob<{ default: ImageMetadata }>(
  "../assets/opengraph-*.png",
);
const opengraphImagePath = `../assets/opengraph-${locale}.png`;

if (!opengraphImages[opengraphImagePath]) {
  throw new Error(
    `${opengraphImagePath} does not exist in glob: ../assets/opengraph-*.png`,
  );
}

const opengraphImg = await getImage({
  format: "png",
  src: opengraphImages[opengraphImagePath](),
  width: 1200,
  height: 630,
});
---

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <title>{pageTitle}</title>
  <meta name="description" content={description} />

  <link href={svgFavicon.src} rel="icon" type="image/svg+xml" />
  <link href={icoFavicon.src} rel="alternate icon" sizes="16x16" />
  <link href={favicon32.src} rel="icon" sizes="32x32" type="image/png" />
  <link href={favicon16.src} rel="icon" sizes="16x16" type="image/png" />
  <link href={favicon180.src} rel="apple-touch-icon" sizes="180x180" />

  <link href={canonicalURL} rel="canonical" />
  {
    !error &&
      locales.map((locale) => (
        <link
          rel="alternate"
          href={`${Astro.site?.origin}${getRoute(locale, getRouteKey(Astro.url.pathname))}`}
          hreflang={languageCodes[locale]}
        />
      ))
  }
  {
    !error && (
      <link
        rel="alternate"
        href={`${Astro.site?.origin}${getRoute("fi", getRouteKey(Astro.url.pathname))}`}
        hreflang="x-default"
      />
    )
  }

  <link rel="sitemap" href="/sitemap-index.xml" />

  <link
    rel="preload"
    as="font"
    type="font/woff2"
    href={manropeWoff}
    crossorigin="anonymous"
  />
  {
    preloadSerif && (
      <link
        rel="preload"
        as="font"
        type="font/woff2"
        href={libreBaskervilleWoff}
        crossorigin="anonymous"
      />
    )
  }
  {
    preloadMono && (
      <link
        rel="preload"
        as="font"
        type="font/woff2"
        href={redHatMonoWoff}
        crossorigin="anonymous"
      />
    )
  }

  <meta property="og:title" content={pageTitle} />
  <meta property="og:description" content={description} />
  <meta property="og:type" content="website" />
  <meta property="og:url" content={canonicalURL} />
  <meta property="og:site_name" content={t("title")} />
  <meta
    property="og:image"
    content={`${Astro.site?.origin}${opengraphImg.src}`}
  />
  <meta
    property="og:image:secure_url"
    content={`${Astro.site?.origin}${opengraphImg.src}`}
  />
  <meta
    property="og:image:type"
    content={`image/${opengraphImg.options.format}`}
  />
  <meta
    property="og:image:width"
    content={opengraphImg.options.width?.toString()}
  />
  <meta
    property="og:image:height"
    content={opengraphImg.options.height?.toString()}
  />
  {
    !error && (
      <meta
        property="og:locale"
        content={
          locale === "en" ? "en_US" : languageCodes[locale].replace("-", "_")
        }
      />
    )
  }
  {
    !error &&
      locales
        .filter((l) => l !== locale)
        .map((locale) => (
          <meta
            property="og:locale:alternate"
            content={
              locale === "en"
                ? "en_US"
                : languageCodes[locale].replace("-", "_")
            }
          />
        ))
  }
</head>
